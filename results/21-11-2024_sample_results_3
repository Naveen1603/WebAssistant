C:\Users\Naveen\PycharmProjects\WebAssistant\venv\Scripts\python.exe C:\Users\Naveen\PycharmProjects\WebAssistant\main.py
C:\Users\Naveen\PycharmProjects\WebAssistant\venv\lib\site-packages\langsmith\client.py:354: LangSmithMissingAPIKeyWarning: API key must be provided when using hosted LangSmith API
  warnings.warn(
input_variables=['agent_scratchpad', 'input', 'tool_names', 'tools'] optional_variables=['chat_history'] input_types={'chat_history': list[typing.Annotated[typing.Union[typing.Annotated[langchain_core.messages.ai.AIMessage, Tag(tag='ai')], typing.Annotated[langchain_core.messages.human.HumanMessage, Tag(tag='human')], typing.Annotated[langchain_core.messages.chat.ChatMessage, Tag(tag='chat')], typing.Annotated[langchain_core.messages.system.SystemMessage, Tag(tag='system')], typing.Annotated[langchain_core.messages.function.FunctionMessage, Tag(tag='function')], typing.Annotated[langchain_core.messages.tool.ToolMessage, Tag(tag='tool')], typing.Annotated[langchain_core.messages.ai.AIMessageChunk, Tag(tag='AIMessageChunk')], typing.Annotated[langchain_core.messages.human.HumanMessageChunk, Tag(tag='HumanMessageChunk')], typing.Annotated[langchain_core.messages.chat.ChatMessageChunk, Tag(tag='ChatMessageChunk')], typing.Annotated[langchain_core.messages.system.SystemMessageChunk, Tag(tag='SystemMessageChunk')], typing.Annotated[langchain_core.messages.function.FunctionMessageChunk, Tag(tag='FunctionMessageChunk')], typing.Annotated[langchain_core.messages.tool.ToolMessageChunk, Tag(tag='ToolMessageChunk')]], FieldInfo(annotation=NoneType, required=True, discriminator=Discriminator(discriminator=<function _get_type at 0x00000200B8CEC1F0>, custom_error_type=None, custom_error_message=None, custom_error_context=None))]]} partial_variables={'chat_history': []} metadata={'lc_hub_owner': 'hwchase17', 'lc_hub_repo': 'structured-chat-agent', 'lc_hub_commit_hash': 'ea510f70a5872eb0f41a4e3b7bb004d5711dc127adee08329c664c6c8be5f13c'} messages=[SystemMessagePromptTemplate(prompt=PromptTemplate(input_variables=['tool_names', 'tools'], input_types={}, partial_variables={}, template='Respond to the human as helpfully and accurately as possible. You have access to the following tools:\n\n{tools}\n\nUse a json blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n\nValid "action" values: "Final Answer" or {tool_names}\n\nProvide only ONE action per $JSON_BLOB, as shown:\n\n```\n{{\n  "action": $TOOL_NAME,\n  "action_input": $INPUT\n}}\n```\n\nFollow this format:\n\nQuestion: input question to answer\nThought: consider previous and subsequent steps\nAction:\n```\n$JSON_BLOB\n```\nObservation: action result\n... (repeat Thought/Action/Observation N times)\nThought: I know what to respond\nAction:\n```\n{{\n  "action": "Final Answer",\n  "action_input": "Final response to human"\n}}\n\nBegin! Reminder to ALWAYS respond with a valid json blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB```then Observation'), additional_kwargs={}), MessagesPlaceholder(variable_name='chat_history', optional=True), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['agent_scratchpad', 'input'], input_types={}, partial_variables={}, template='{input}\n\n{agent_scratchpad}\n (reminder to respond in a JSON blob no matter what)'), additional_kwargs={})]
Tools Available: ['click_element', 'navigate_browser', 'previous_webpage', 'extract_text', 'extract_hyperlinks', 'get_elements', 'current_webpage', 'fill_element'], Tools Loaded: ['click_element', 'navigate_browser', 'previous_webpage', 'extract_text', 'extract_hyperlinks', 'get_elements', 'current_webpage', 'fill_element']
{'lc': 1, 'type': 'not_implemented', 'id': ['langchain', 'agents', 'agent', 'AgentExecutor'], 'repr': 'AgentExecutor(verbose=True, agent=RunnableAgent(runnable=RunnableAssign(mapper={\n  agent_scratchpad: RunnableLambda(lambda x: format_log_to_str(x[\'intermediate_steps\']))\n})\n| ChatPromptTemplate(input_variables=[\'agent_scratchpad\', \'input\'], optional_variables=[\'chat_history\'], input_types={\'chat_history\': list[typing.Annotated[typing.Union[typing.Annotated[langchain_core.messages.ai.AIMessage, Tag(tag=\'ai\')], typing.Annotated[langchain_core.messages.human.HumanMessage, Tag(tag=\'human\')], typing.Annotated[langchain_core.messages.chat.ChatMessage, Tag(tag=\'chat\')], typing.Annotated[langchain_core.messages.system.SystemMessage, Tag(tag=\'system\')], typing.Annotated[langchain_core.messages.function.FunctionMessage, Tag(tag=\'function\')], typing.Annotated[langchain_core.messages.tool.ToolMessage, Tag(tag=\'tool\')], typing.Annotated[langchain_core.messages.ai.AIMessageChunk, Tag(tag=\'AIMessageChunk\')], typing.Annotated[langchain_core.messages.human.HumanMessageChunk, Tag(tag=\'HumanMessageChunk\')], typing.Annotated[langchain_core.messages.chat.ChatMessageChunk, Tag(tag=\'ChatMessageChunk\')], typing.Annotated[langchain_core.messages.system.SystemMessageChunk, Tag(tag=\'SystemMessageChunk\')], typing.Annotated[langchain_core.messages.function.FunctionMessageChunk, Tag(tag=\'FunctionMessageChunk\')], typing.Annotated[langchain_core.messages.tool.ToolMessageChunk, Tag(tag=\'ToolMessageChunk\')]], FieldInfo(annotation=NoneType, required=True, discriminator=Discriminator(discriminator=<function _get_type at 0x00000200B8CEC1F0>, custom_error_type=None, custom_error_message=None, custom_error_context=None))]]}, partial_variables={\'chat_history\': [], \'tools\': \'click_element - Click on an element with the given CSS selector, args: {\\\'selector\\\': {\\\'description\\\': \\\'CSS selector for the element to click\\\', \\\'title\\\': \\\'Selector\\\', \\\'type\\\': \\\'string\\\'}}\\nnavigate_browser - Navigate a browser to the specified URL, args: {\\\'url\\\': {\\\'description\\\': \\\'url to navigate to\\\', \\\'title\\\': \\\'Url\\\', \\\'type\\\': \\\'string\\\'}}\\nprevious_webpage - Navigate back to the previous page in the browser history, args: {}\\nextract_text - Extract all the text on the current webpage, args: {}\\nextract_hyperlinks - Extract all hyperlinks on the current webpage, args: {\\\'absolute_urls\\\': {\\\'default\\\': False, \\\'description\\\': \\\'Return absolute URLs instead of relative URLs\\\', \\\'title\\\': \\\'Absolute Urls\\\', \\\'type\\\': \\\'boolean\\\'}}\\nget_elements - Retrieve elements in the current web page matching the given CSS selector, args: {\\\'selector\\\': {\\\'description\\\': "CSS selector, such as \\\'*\\\', \\\'div\\\', \\\'p\\\', \\\'a\\\', #id, .classname", \\\'title\\\': \\\'Selector\\\', \\\'type\\\': \\\'string\\\'}, \\\'attributes\\\': {\\\'description\\\': \\\'Set of attributes to retrieve for each element\\\', \\\'items\\\': {\\\'type\\\': \\\'string\\\'}, \\\'title\\\': \\\'Attributes\\\', \\\'type\\\': \\\'array\\\'}}\\ncurrent_webpage - Returns the URL of the current page, args: {}\\nfill_element - Fill on an element with the given CSS selector, args: {\\\'selector\\\': {\\\'description\\\': \\\'CSS selector for the element to fill\\\', \\\'title\\\': \\\'Selector\\\', \\\'type\\\': \\\'string\\\'}, \\\'value\\\': {\\\'default\\\': None, \\\'description\\\': \\\'text to be filled in element\\\', \\\'title\\\': \\\'Value\\\', \\\'type\\\': \\\'string\\\'}}\', \'tool_names\': \'click_element, navigate_browser, previous_webpage, extract_text, extract_hyperlinks, get_elements, current_webpage, fill_element\'}, metadata={\'lc_hub_owner\': \'hwchase17\', \'lc_hub_repo\': \'structured-chat-agent\', \'lc_hub_commit_hash\': \'ea510f70a5872eb0f41a4e3b7bb004d5711dc127adee08329c664c6c8be5f13c\'}, messages=[SystemMessagePromptTemplate(prompt=PromptTemplate(input_variables=[\'tool_names\', \'tools\'], input_types={}, partial_variables={}, template=\'Respond to the human as helpfully and accurately as possible. You have access to the following tools:\\n\\n{tools}\\n\\nUse a json blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\\n\\nValid "action" values: "Final Answer" or {tool_names}\\n\\nProvide only ONE action per $JSON_BLOB, as shown:\\n\\n```\\n{{\\n  "action": $TOOL_NAME,\\n  "action_input": $INPUT\\n}}\\n```\\n\\nFollow this format:\\n\\nQuestion: input question to answer\\nThought: consider previous and subsequent steps\\nAction:\\n```\\n$JSON_BLOB\\n```\\nObservation: action result\\n... (repeat Thought/Action/Observation N times)\\nThought: I know what to respond\\nAction:\\n```\\n{{\\n  "action": "Final Answer",\\n  "action_input": "Final response to human"\\n}}\\n\\nBegin! Reminder to ALWAYS respond with a valid json blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB```then Observation\'), additional_kwargs={}), MessagesPlaceholder(variable_name=\'chat_history\', optional=True), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=[\'agent_scratchpad\', \'input\'], input_types={}, partial_variables={}, template=\'{input}\\n\\n{agent_scratchpad}\\n (reminder to respond in a JSON blob no matter what)\'), additional_kwargs={})])\n| RunnableBinding(bound=ChatOllama(model=\'gemma2:9b\', num_predict=256, temperature=0.5), kwargs={\'stop\': [\'\\nObservation\']}, config={}, config_factories=[])\n| JSONAgentOutputParser(), input_keys_arg=[], return_keys_arg=[], stream_runnable=True), tools=[CustomClickTool(sync_browser=<Browser type=<BrowserType name=chromium executable_path=C:\\Users\\Naveen\\AppData\\Local\\ms-playwright\\chromium-1140\\chrome-win\\chrome.exe> version=130.0.6723.31>), NavigateTool(sync_browser=<Browser type=<BrowserType name=chromium executable_path=C:\\Users\\Naveen\\AppData\\Local\\ms-playwright\\chromium-1140\\chrome-win\\chrome.exe> version=130.0.6723.31>), CustomNavigateBackTool(sync_browser=<Browser type=<BrowserType name=chromium executable_path=C:\\Users\\Naveen\\AppData\\Local\\ms-playwright\\chromium-1140\\chrome-win\\chrome.exe> version=130.0.6723.31>), CustomExtractTextTool(sync_browser=<Browser type=<BrowserType name=chromium executable_path=C:\\Users\\Naveen\\AppData\\Local\\ms-playwright\\chromium-1140\\chrome-win\\chrome.exe> version=130.0.6723.31>), ExtractHyperlinksTool(sync_browser=<Browser type=<BrowserType name=chromium executable_path=C:\\Users\\Naveen\\AppData\\Local\\ms-playwright\\chromium-1140\\chrome-win\\chrome.exe> version=130.0.6723.31>), GetElementsTool(sync_browser=<Browser type=<BrowserType name=chromium executable_path=C:\\Users\\Naveen\\AppData\\Local\\ms-playwright\\chromium-1140\\chrome-win\\chrome.exe> version=130.0.6723.31>), CustomCurrentWebPageTool(sync_browser=<Browser type=<BrowserType name=chromium executable_path=C:\\Users\\Naveen\\AppData\\Local\\ms-playwright\\chromium-1140\\chrome-win\\chrome.exe> version=130.0.6723.31>), FillTool(sync_browser=<Browser type=<BrowserType name=chromium executable_path=C:\\Users\\Naveen\\AppData\\Local\\ms-playwright\\chromium-1140\\chrome-win\\chrome.exe> version=130.0.6723.31>)], handle_parsing_errors=True)', 'name': 'AgentExecutor'}


> Entering new AgentExecutor chain...
```json
{
  "action": "navigate_browser",
  "action_input": "https://www.amazon.com/"
}
```Navigating to https://www.amazon.com/ returned status code 200```json
{
  "action": "fill_element",
  "action_input": {
    "selector": "input[type='text']",
    "value": "Iphone 15"
  }
}
```Filled element 'input[type='text']'```json
{
  "action": "click_element",
  "action_input": {
    "selector": "button[type='submit']"
  }
}
```Clicked element 'button[type='submit']'```json
{
  "action": "extract_text",
  "action_input": {}
}
```{"response": "Amazon.com Enter the characters you see below Sorry, we just need to make sure you're not a robot. For best results, please make sure your browser is accepting cookies. Type the characters you see in this image: Try different image Continue shopping Conditions of Use Privacy Policy \u00a9 1996-2014, Amazon.com, Inc. or its affiliates"}```json
{
  "action": "Final Answer",
  "action_input": "I am unable to process the text content from the webpage as it contains Captcha verification and I cannot interact with those."
}
```

> Finished chain.
{'input': 'Navigate to amazon.com and search for Iphone 15 then click on the page results to extract device specifications and price. Get the price of Iphone', 'output': 'I am unable to process the text content from the webpage as it contains Captcha verification and I cannot interact with those.'}

Process finished with exit code 0
